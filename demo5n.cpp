/******************************************************************************
 * This demo is a modification of demo5.cpp to implement normal mapping,
 * simulating bumpy surfaces.
 *
 * The vertex data now includes tangent vectors (in addition to normals), and
 * the texture code is upgraded to load a diffuse map and a normal map at the
 * same time.
 *
*  (Note that the shader code is also updated -- see demo5n.vs and demo5n.fs.)
 *
 * TIP: To help you understand the code better, I highly recommend that you
 * view the changes between demo5 and demo5n in VS Code by doing the following:
 *
 * 1. Right-click demo5.cpp in VS Code's Explorer pane and click
 *    "Select for Compare".
 * 2. Right-click the demo5n.cpp and click "Compare with Selected".
 *
 * (Do the same for demo5.vs/demo5n.vs and demo5.fs/demo5n.fs.)
 *
 * Happy hacking! - eric
 *****************************************************************************/

#include <iostream>
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <GLFW/glfw3native.h>
#include <glm/gtc/type_ptr.hpp>
#include <gdev.h>
#include <vector>

// change this to your desired window attributes
#define WINDOW_WIDTH  640
#define WINDOW_HEIGHT 360
#define WINDOW_TITLE  "Exercise2 (use WASDQE keys for camera, IKJLUO keys for light, ZX keys for Ambient Intensity, CV keys for Specular Intensity, BN keys for Specular Power, 1-2 for Spotlight Cutoff, 3-4 for Spotlight Outer Angle)"
GLFWwindow *pWindow;
/*
// model
float vertices[] =
{
    // position (x, y, z)    normal (x, y, z)     tangent (x, y, z)    texture coordinates (s, t)

    // ground plane
    -8.00f, -2.00f,  8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
     8.00f, -2.00f,  8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  4.0f, 0.0f,
     8.00f, -2.00f, -8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  4.0f, 4.0f,
    -8.00f, -2.00f,  8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
     8.00f, -2.00f, -8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  4.0f, 4.0f,
    -8.00f, -2.00f, -8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 4.0f,

    // UNCOMMENT VERTICES BELOW TO PRESERVE PLANE BUT REMOVE CUBE
    // cube top
    -1.00f,  1.00f,  1.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
     1.00f,  1.00f,  1.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
     1.00f,  1.00f, -1.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
    -1.00f,  1.00f,  1.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
     1.00f,  1.00f, -1.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
    -1.00f,  1.00f, -1.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,

    // cube bottom
    -1.00f, -1.00f, -1.00f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
     1.00f, -1.00f, -1.00f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
     1.00f, -1.00f,  1.00f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
    -1.00f, -1.00f, -1.00f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
     1.00f, -1.00f,  1.00f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
    -1.00f, -1.00f,  1.00f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,

    // cube front
    -1.00f, -1.00f,  1.00f,  0.0f,  0.0f,  1.0f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
     1.00f, -1.00f,  1.00f,  0.0f,  0.0f,  1.0f,  1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
     1.00f,  1.00f,  1.00f,  0.0f,  0.0f,  1.0f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
    -1.00f, -1.00f,  1.00f,  0.0f,  0.0f,  1.0f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
     1.00f,  1.00f,  1.00f,  0.0f,  0.0f,  1.0f,  1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
    -1.00f,  1.00f,  1.00f,  0.0f,  0.0f,  1.0f,  1.0f,  0.0f,  0.0f,  0.0f, 1.0f,

    // cube back
     1.00f, -1.00f, -1.00f,  0.0f,  0.0f, -1.0f, -1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
    -1.00f, -1.00f, -1.00f,  0.0f,  0.0f, -1.0f, -1.0f,  0.0f,  0.0f,  1.0f, 0.0f,
    -1.00f,  1.00f, -1.00f,  0.0f,  0.0f, -1.0f, -1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
     1.00f, -1.00f, -1.00f,  0.0f,  0.0f, -1.0f, -1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
    -1.00f,  1.00f, -1.00f,  0.0f,  0.0f, -1.0f, -1.0f,  0.0f,  0.0f,  1.0f, 1.0f,
     1.00f,  1.00f, -1.00f,  0.0f,  0.0f, -1.0f, -1.0f,  0.0f,  0.0f,  0.0f, 1.0f,

    // cube right
     1.00f, -1.00f,  1.00f,  1.0f,  0.0f,  0.0f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,
     1.00f, -1.00f, -1.00f,  1.0f,  0.0f,  0.0f,  0.0f,  0.0f, -1.0f,  1.0f, 0.0f,
     1.00f,  1.00f, -1.00f,  1.0f,  0.0f,  0.0f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
     1.00f, -1.00f,  1.00f,  1.0f,  0.0f,  0.0f,  0.0f,  0.0f, -1.0f,  0.0f, 0.0f,
     1.00f,  1.00f, -1.00f,  1.0f,  0.0f,  0.0f,  0.0f,  0.0f, -1.0f,  1.0f, 1.0f,
     1.00f,  1.00f,  1.00f,  1.0f,  0.0f,  0.0f,  0.0f,  0.0f, -1.0f,  0.0f, 1.0f,

    // cube left
    -1.00f, -1.00f, -1.00f, -1.0f,  0.0f,  0.0f,  0.0f,  0.0f,  1.0f,  0.0f, 0.0f,
    -1.00f, -1.00f,  1.00f, -1.0f,  0.0f,  0.0f,  0.0f,  0.0f,  1.0f,  1.0f, 0.0f,
    -1.00f,  1.00f,  1.00f, -1.0f,  0.0f,  0.0f,  0.0f,  0.0f,  1.0f,  1.0f, 1.0f,
    -1.00f, -1.00f, -1.00f, -1.0f,  0.0f,  0.0f,  0.0f,  0.0f,  1.0f,  0.0f, 0.0f,
    -1.00f,  1.00f,  1.00f, -1.0f,  0.0f,  0.0f,  0.0f,  0.0f,  1.0f,  1.0f, 1.0f,
    -1.00f,  1.00f, -1.00f, -1.0f,  0.0f,  0.0f,  0.0f,  0.0f,  1.0f,  0.0f, 1.0f
};
*/
// OpenGL object IDs
GLuint vao, vao2, vao3;
GLuint vbo, vbo2, vbo3;
GLuint shader, frameshader;
GLuint texture[2], texturePlane[2], iceCreamTexture[2];

/*============= SPHERE POINTS CALCULATED THROUGH CODE BELOW ===============
#include <iostream>
#include <cmath>
#include <iomanip>

using namespace std;

double PI = 3.14159265358979323846;

int main()
{
    int numCircles = 10; // number of circles to generate
    double initialRadius = 5.0; // initial radius of the circles
    double radiusShrinkFactor = 1 / (numCircles + 0.5); // factor by which radius shrinks for each circle

    int numPoints = 10; // number of points to generate

    // loop through each circle
    for (int j = 0; j < numCircles; j++)
    {
        double angle1 = PI * (j + 0.5) / numCircles; // calculate the angle for latitude
        double radius1 = initialRadius * sin(angle1); // calculate the radius for latitude
        double z = initialRadius * cos(angle1); // calculate the z-coordinate

        // loop through and generate the coordinates of the points on the circle
        for (int i = 0; i < numPoints; i++)
        {
            double angle2 = (2.0 * PI * i) / numPoints; // calculate the angle for longitude
            double x = radius1 * cos(angle2); // calculate x-coordinate
            double y = radius1 * sin(angle2); // calculate y-coordinate
            z = abs(z); // take the absolute value of z

            // calculate the normal and tangent vectors
            double normx = x / initialRadius;
            double normy = y / initialRadius;
            double normz = z / initialRadius;
            double tanx = -sin(angle2);
            double tany = cos(angle2);
            double tanz = 0.0;
            double s = angle2 / (2 * PI);
            double t = angle1 / PI;

            // output the point coordinates, normal vector, and tangent vector
            cout << fixed << setprecision(2) << x << "f , " << y << "f , " << z << "f, "
                 << normx << "f, " << normy << "f, " << normz << "f, "
                 << tanx << "f, " << tany << "f, " << tanz << "f, " << s << "f, " << t << "f, " << endl;
        }

        cout << endl;
    }

    return 0;
}
*/
float vertices[] = 
{
0.39f , 0.00f , 4.98f, 0.08f, 0.00f, 1.00f, -0.00f, 1.00f, 0.00f, 0.00f, 0.03f, 
0.32f , 0.23f , 4.98f, 0.06f, 0.05f, 1.00f, -0.59f, 0.81f, 0.00f, 0.10f, 0.03f,
0.12f , 0.37f , 4.98f, 0.02f, 0.07f, 1.00f, -0.95f, 0.31f, 0.00f, 0.20f, 0.03f,
-0.12f , 0.37f , 4.98f, -0.02f, 0.07f, 1.00f, -0.95f, -0.31f, 0.00f, 0.30f, 0.03f,
-0.32f , 0.23f , 4.98f, -0.06f, 0.05f, 1.00f, -0.59f, -0.81f, 0.00f, 0.40f, 0.03f,
-0.39f , 0.00f , 4.98f, -0.08f, 0.00f, 1.00f, -0.00f, -1.00f, 0.00f, 0.50f, 0.03f,
-0.32f , -0.23f , 4.98f, -0.06f, -0.05f, 1.00f, 0.59f, -0.81f, 0.00f, 0.60f, 0.03f,
-0.12f , -0.37f , 4.98f, -0.02f, -0.07f, 1.00f, 0.95f, -0.31f, 0.00f, 0.70f, 0.03f,
0.12f , -0.37f , 4.98f, 0.02f, -0.07f, 1.00f, 0.95f, 0.31f, 0.00f, 0.80f, 0.03f,
0.32f , -0.23f , 4.98f, 0.06f, -0.05f, 1.00f, 0.59f, 0.81f, 0.00f, 0.90f, 0.03f,
0.39f , 0.00f , 4.98f, 0.08f, 0.00f, 1.00f, -0.00f, 1.00f, 0.00f, 1.00f, 0.03f, 

1.17f , 0.00f , 4.86f, 0.23f, 0.00f, 0.97f, -0.00f, 1.00f, 0.00f, 0.00f, 0.07f,
0.94f , 0.69f , 4.86f, 0.19f, 0.14f, 0.97f, -0.59f, 0.81f, 0.00f, 0.10f, 0.07f,
0.36f , 1.11f , 4.86f, 0.07f, 0.22f, 0.97f, -0.95f, 0.31f, 0.00f, 0.20f, 0.07f,
-0.36f , 1.11f , 4.86f, -0.07f, 0.22f, 0.97f, -0.95f, -0.31f, 0.00f, 0.30f, 0.07f,
-0.94f , 0.69f , 4.86f, -0.19f, 0.14f, 0.97f, -0.59f, -0.81f, 0.00f, 0.40f, 0.07f,
-1.17f , 0.00f , 4.86f, -0.23f, 0.00f, 0.97f, -0.00f, -1.00f, 0.00f, 0.50f, 0.07f,
-0.94f , -0.69f , 4.86f, -0.19f, -0.14f, 0.97f, 0.59f, -0.81f, 0.00f, 0.60f, 0.07f,
-0.36f , -1.11f , 4.86f, -0.07f, -0.22f, 0.97f, 0.95f, -0.31f, 0.00f, 0.70f, 0.07f,
0.36f , -1.11f , 4.86f, 0.07f, -0.22f, 0.97f, 0.95f, 0.31f, 0.00f, 0.80f, 0.07f,
0.94f , -0.69f , 4.86f, 0.19f, -0.14f, 0.97f, 0.59f, 0.81f, 0.00f, 0.90f, 0.07f, 
1.17f , 0.00f , 4.86f, 0.23f, 0.00f, 0.97f, -0.00f, 1.00f, 0.00f, 1.00f, 0.07f,

1.91f , 0.00f , 4.62f, 0.38f, 0.00f, 0.92f, -0.00f, 1.00f, 0.00f, 0.00f, 0.12f,
1.55f , 1.12f , 4.62f, 0.31f, 0.22f, 0.92f, -0.59f, 0.81f, 0.00f, 0.10f, 0.12f,
0.59f , 1.82f , 4.62f, 0.12f, 0.36f, 0.92f, -0.95f, 0.31f, 0.00f, 0.20f, 0.12f,
-0.59f , 1.82f , 4.62f, -0.12f, 0.36f, 0.92f, -0.95f, -0.31f, 0.00f, 0.30f, 0.12f,
-1.55f , 1.12f , 4.62f, -0.31f, 0.22f, 0.92f, -0.59f, -0.81f, 0.00f, 0.40f, 0.12f,
-1.91f , 0.00f , 4.62f, -0.38f, 0.00f, 0.92f, -0.00f, -1.00f, 0.00f, 0.50f, 0.12f,
-1.55f , -1.12f , 4.62f, -0.31f, -0.22f, 0.92f, 0.59f, -0.81f, 0.00f, 0.60f, 0.12f,
-0.59f , -1.82f , 4.62f, -0.12f, -0.36f, 0.92f, 0.95f, -0.31f, 0.00f, 0.70f, 0.12f,
0.59f , -1.82f , 4.62f, 0.12f, -0.36f, 0.92f, 0.95f, 0.31f, 0.00f, 0.80f, 0.12f,
1.55f , -1.12f , 4.62f, 0.31f, -0.22f, 0.92f, 0.59f, 0.81f, 0.00f, 0.90f, 0.12f,
1.91f , 0.00f , 4.62f, 0.38f, 0.00f, 0.92f, -0.00f, 1.00f, 0.00f, 1.00f, 0.12f,

2.61f , 0.00f , 4.26f, 0.52f, 0.00f, 0.85f, -0.00f, 1.00f, 0.00f, 0.00f, 0.17f,
2.11f , 1.54f , 4.26f, 0.42f, 0.31f, 0.85f, -0.59f, 0.81f, 0.00f, 0.10f, 0.17f,
0.81f , 2.48f , 4.26f, 0.16f, 0.50f, 0.85f, -0.95f, 0.31f, 0.00f, 0.20f, 0.17f,
-0.81f , 2.48f , 4.26f, -0.16f, 0.50f, 0.85f, -0.95f, -0.31f, 0.00f, 0.30f, 0.17f,
-2.11f , 1.54f , 4.26f, -0.42f, 0.31f, 0.85f, -0.59f, -0.81f, 0.00f, 0.40f, 0.17f,
-2.61f , 0.00f , 4.26f, -0.52f, 0.00f, 0.85f, -0.00f, -1.00f, 0.00f, 0.50f, 0.17f,
-2.11f , -1.54f , 4.26f, -0.42f, -0.31f, 0.85f, 0.59f, -0.81f, 0.00f, 0.60f, 0.17f,
-0.81f , -2.48f , 4.26f, -0.16f, -0.50f, 0.85f, 0.95f, -0.31f, 0.00f, 0.70f, 0.17f,
0.81f , -2.48f , 4.26f, 0.16f, -0.50f, 0.85f, 0.95f, 0.31f, 0.00f, 0.80f, 0.17f,
2.11f , -1.54f , 4.26f, 0.42f, -0.31f, 0.85f, 0.59f, 0.81f, 0.00f, 0.90f, 0.17f,
2.61f , 0.00f , 4.26f, 0.52f, 0.00f, 0.85f, -0.00f, 1.00f, 0.00f, 1.00f, 0.17f,

3.25f , 0.00f , 3.80f, 0.65f, 0.00f, 0.76f, -0.00f, 1.00f, 0.00f, 0.00f, 0.23f,
2.63f , 1.91f , 3.80f, 0.53f, 0.38f, 0.76f, -0.59f, 0.81f, 0.00f, 0.10f, 0.23f, 
1.00f , 3.09f , 3.80f, 0.20f, 0.62f, 0.76f, -0.95f, 0.31f, 0.00f, 0.20f, 0.23f,
-1.00f , 3.09f , 3.80f, -0.20f, 0.62f, 0.76f, -0.95f, -0.31f, 0.00f, 0.30f, 0.23f,
-2.63f , 1.91f , 3.80f, -0.53f, 0.38f, 0.76f, -0.59f, -0.81f, 0.00f, 0.40f, 0.23f,
-3.25f , 0.00f , 3.80f, -0.65f, 0.00f, 0.76f, -0.00f, -1.00f, 0.00f, 0.50f, 0.23f,
-2.63f , -1.91f , 3.80f, -0.53f, -0.38f, 0.76f, 0.59f, -0.81f, 0.00f, 0.60f, 0.23f,
-1.00f , -3.09f , 3.80f, -0.20f, -0.62f, 0.76f, 0.95f, -0.31f, 0.00f, 0.70f, 0.23f,
1.00f , -3.09f , 3.80f, 0.20f, -0.62f, 0.76f, 0.95f, 0.31f, 0.00f, 0.80f, 0.23f,
2.63f , -1.91f , 3.80f, 0.53f, -0.38f, 0.76f, 0.59f, 0.81f, 0.00f, 0.90f, 0.23f,
3.25f , 0.00f , 3.80f, 0.65f, 0.00f, 0.76f, -0.00f, 1.00f, 0.00f, 1.00f, 0.23f,

3.80f , 0.00f , 3.25f, 0.76f, 0.00f, 0.65f, -0.00f, 1.00f, 0.00f, 0.00f, 0.27f,
3.08f , 2.23f , 3.25f, 0.62f, 0.45f, 0.65f, -0.59f, 0.81f, 0.00f, 0.10f, 0.27f,
1.17f , 3.62f , 3.25f, 0.23f, 0.72f, 0.65f, -0.95f, 0.31f, 0.00f, 0.20f, 0.27f,
-1.17f , 3.62f , 3.25f, -0.23f, 0.72f, 0.65f, -0.95f, -0.31f, 0.00f, 0.30f, 0.27f,
-3.08f , 2.23f , 3.25f, -0.62f, 0.45f, 0.65f, -0.59f, -0.81f, 0.00f, 0.40f, 0.27f,
-3.80f , 0.00f , 3.25f, -0.76f, 0.00f, 0.65f, -0.00f, -1.00f, 0.00f, 0.50f, 0.27f,
-3.08f , -2.23f , 3.25f, -0.62f, -0.45f, 0.65f, 0.59f, -0.81f, 0.00f, 0.60f, 0.27f,
-1.17f , -3.62f , 3.25f, -0.23f, -0.72f, 0.65f, 0.95f, -0.31f, 0.00f, 0.70f, 0.27f,
1.17f , -3.62f , 3.25f, 0.23f, -0.72f, 0.65f, 0.95f, 0.31f, 0.00f, 0.80f, 0.27f,
3.08f , -2.23f , 3.25f, 0.62f, -0.45f, 0.65f, 0.59f, 0.81f, 0.00f, 0.90f, 0.27f,
3.80f , 0.00f , 3.25f, 0.76f, 0.00f, 0.65f, -0.00f, 1.00f, 0.00f, 1.00f, 0.27f,

4.26f , 0.00f , 2.61f, 0.85f, 0.00f, 0.52f, -0.00f, 1.00f, 0.00f, 0.00f, 0.33f,
3.45f , 2.51f , 2.61f, 0.69f, 0.50f, 0.52f, -0.59f, 0.81f, 0.00f, 0.10f, 0.33f,
1.32f , 4.05f , 2.61f, 0.26f, 0.81f, 0.52f, -0.95f, 0.31f, 0.00f, 0.20f, 0.33f, 
-1.32f , 4.05f , 2.61f, -0.26f, 0.81f, 0.52f, -0.95f, -0.31f, 0.00f, 0.30f, 0.33f,
-3.45f , 2.51f , 2.61f, -0.69f, 0.50f, 0.52f, -0.59f, -0.81f, 0.00f, 0.40f, 0.33f,
-4.26f , 0.00f , 2.61f, -0.85f, 0.00f, 0.52f, -0.00f, -1.00f, 0.00f, 0.50f, 0.33f,
-3.45f , -2.51f , 2.61f, -0.69f, -0.50f, 0.52f, 0.59f, -0.81f, 0.00f, 0.60f, 0.33f,
-1.32f , -4.05f , 2.61f, -0.26f, -0.81f, 0.52f, 0.95f, -0.31f, 0.00f, 0.70f, 0.33f,
1.32f , -4.05f , 2.61f, 0.26f, -0.81f, 0.52f, 0.95f, 0.31f, 0.00f, 0.80f, 0.33f,
3.45f , -2.51f , 2.61f, 0.69f, -0.50f, 0.52f, 0.59f, 0.81f, 0.00f, 0.90f, 0.33f,
4.26f , 0.00f , 2.61f, 0.85f, 0.00f, 0.52f, -0.00f, 1.00f, 0.00f, 1.00f, 0.33f,

4.62f , 0.00f , 1.91f, 0.92f, 0.00f, 0.38f, -0.00f, 1.00f, 0.00f, 0.00f, 0.38f,
3.74f , 2.72f , 1.91f, 0.75f, 0.54f, 0.38f, -0.59f, 0.81f, 0.00f, 0.10f, 0.38f,
1.43f , 4.39f , 1.91f, 0.29f, 0.88f, 0.38f, -0.95f, 0.31f, 0.00f, 0.20f, 0.38f,
-1.43f , 4.39f , 1.91f, -0.29f, 0.88f, 0.38f, -0.95f, -0.31f, 0.00f, 0.30f, 0.38f,
-3.74f , 2.72f , 1.91f, -0.75f, 0.54f, 0.38f, -0.59f, -0.81f, 0.00f, 0.40f, 0.38f,
-4.62f , 0.00f , 1.91f, -0.92f, 0.00f, 0.38f, -0.00f, -1.00f, 0.00f, 0.50f, 0.38f,
-3.74f , -2.72f , 1.91f, -0.75f, -0.54f, 0.38f, 0.59f, -0.81f, 0.00f, 0.60f, 0.38f,
-1.43f , -4.39f , 1.91f, -0.29f, -0.88f, 0.38f, 0.95f, -0.31f, 0.00f, 0.70f, 0.38f,
1.43f , -4.39f , 1.91f, 0.29f, -0.88f, 0.38f, 0.95f, 0.31f, 0.00f, 0.80f, 0.38f,
3.74f , -2.72f , 1.91f, 0.75f, -0.54f, 0.38f, 0.59f, 0.81f, 0.00f, 0.90f, 0.38f,
4.62f , 0.00f , 1.91f, 0.92f, 0.00f, 0.38f, -0.00f, 1.00f, 0.00f, 1.00f, 0.38f,

4.86f , 0.00f , 1.17f, 0.97f, 0.00f, 0.23f, -0.00f, 1.00f, 0.00f, 0.00f, 0.42f,
3.93f , 2.86f , 1.17f, 0.79f, 0.57f, 0.23f, -0.59f, 0.81f, 0.00f, 0.10f, 0.42f,
1.50f , 4.62f , 1.17f, 0.30f, 0.92f, 0.23f, -0.95f, 0.31f, 0.00f, 0.20f, 0.42f,
-1.50f , 4.62f , 1.17f, -0.30f, 0.92f, 0.23f, -0.95f, -0.31f, 0.00f, 0.30f, 0.42f,
-3.93f , 2.86f , 1.17f, -0.79f, 0.57f, 0.23f, -0.59f, -0.81f, 0.00f, 0.40f, 0.42f, 
-4.86f , 0.00f , 1.17f, -0.97f, 0.00f, 0.23f, -0.00f, -1.00f, 0.00f, 0.50f, 0.42f,
-3.93f , -2.86f , 1.17f, -0.79f, -0.57f, 0.23f, 0.59f, -0.81f, 0.00f, 0.60f, 0.42f,
-1.50f , -4.62f , 1.17f, -0.30f, -0.92f, 0.23f, 0.95f, -0.31f, 0.00f, 0.70f, 0.42f,
1.50f , -4.62f , 1.17f, 0.30f, -0.92f, 0.23f, 0.95f, 0.31f, 0.00f, 0.80f, 0.42f,
3.93f , -2.86f , 1.17f, 0.79f, -0.57f, 0.23f, 0.59f, 0.81f, 0.00f, 0.90f, 0.42f,
4.86f , 0.00f , 1.17f, 0.97f, 0.00f, 0.23f, -0.00f, 1.00f, 0.00f, 1.00f, 0.42f,

4.98f , 0.00f , 0.39f, 1.00f, 0.00f, 0.08f, -0.00f, 1.00f, 0.00f, 0.00f, 0.47f,
4.03f , 2.93f , 0.39f, 0.81f, 0.59f, 0.08f, -0.59f, 0.81f, 0.00f, 0.10f, 0.47f,
1.54f , 4.74f , 0.39f, 0.31f, 0.95f, 0.08f, -0.95f, 0.31f, 0.00f, 0.20f, 0.47f,
-1.54f , 4.74f , 0.39f, -0.31f, 0.95f, 0.08f, -0.95f, -0.31f, 0.00f, 0.30f, 0.47f,
-4.03f , 2.93f , 0.39f, -0.81f, 0.59f, 0.08f, -0.59f, -0.81f, 0.00f, 0.40f, 0.47f,
-4.98f , 0.00f , 0.39f, -1.00f, 0.00f, 0.08f, -0.00f, -1.00f, 0.00f, 0.50f, 0.47f,
-4.03f , -2.93f , 0.39f, -0.81f, -0.59f, 0.08f, 0.59f, -0.81f, 0.00f, 0.60f, 0.47f,
-1.54f , -4.74f , 0.39f, -0.31f, -0.95f, 0.08f, 0.95f, -0.31f, 0.00f, 0.70f, 0.47f,
1.54f , -4.74f , 0.39f, 0.31f, -0.95f, 0.08f, 0.95f, 0.31f, 0.00f, 0.80f, 0.47f,
4.03f , -2.93f , 0.39f, 0.81f, -0.59f, 0.08f, 0.59f, 0.81f, 0.00f, 0.90f, 0.47f,
4.98f , 0.00f , 0.39f, 1.00f, 0.00f, 0.08f, -0.00f, 1.00f, 0.00f, 1.00f, 0.47f,

4.98f , 0.00f , -0.39f, 1.00f, 0.00f, -0.08f, -0.00f, 1.00f, 0.00f, 0.00f, 0.53f,
4.03f , 2.93f , -0.39f, 0.81f, 0.59f, -0.08f, -0.59f, 0.81f, 0.00f, 0.10f, 0.53f,
1.54f , 4.74f , -0.39f, 0.31f, 0.95f, -0.08f, -0.95f, 0.31f, 0.00f, 0.20f, 0.53f,
-1.54f , 4.74f , -0.39f, -0.31f, 0.95f, -0.08f, -0.95f, -0.31f, 0.00f, 0.30f, 0.53f,
-4.03f , 2.93f , -0.39f, -0.81f, 0.59f, -0.08f, -0.59f, -0.81f, 0.00f, 0.40f, 0.53f,
-4.98f , 0.00f , -0.39f, -1.00f, 0.00f, -0.08f, -0.00f, -1.00f, 0.00f, 0.50f, 0.53f,
-4.03f , -2.93f , -0.39f, -0.81f, -0.59f, -0.08f, 0.59f, -0.81f, 0.00f, 0.60f, 0.53f,
-1.54f , -4.74f , -0.39f, -0.31f, -0.95f, -0.08f, 0.95f, -0.31f, 0.00f, 0.70f, 0.53f, 
1.54f , -4.74f , -0.39f, 0.31f, -0.95f, -0.08f, 0.95f, 0.31f, 0.00f, 0.80f, 0.53f,
4.03f , -2.93f , -0.39f, 0.81f, -0.59f, -0.08f, 0.59f, 0.81f, 0.00f, 0.90f, 0.53f,
4.98f , 0.00f , -0.39f, 1.00f, 0.00f, -0.08f, -0.00f, 1.00f, 0.00f, 1.00f, 0.53f,

4.86f , 0.00f , -1.17f, 0.97f, 0.00f, -0.23f, -0.00f, 1.00f, 0.00f, 0.00f, 0.57f,
3.93f , 2.86f , -1.17f, 0.79f, 0.57f, -0.23f, -0.59f, 0.81f, 0.00f, 0.10f, 0.57f,
1.50f , 4.62f , -1.17f, 0.30f, 0.92f, -0.23f, -0.95f, 0.31f, 0.00f, 0.20f, 0.57f,
-1.50f , 4.62f , -1.17f, -0.30f, 0.92f, -0.23f, -0.95f, -0.31f, 0.00f, 0.30f, 0.57f,
-3.93f , 2.86f , -1.17f, -0.79f, 0.57f, -0.23f, -0.59f, -0.81f, 0.00f, 0.40f, 0.57f,
-4.86f , 0.00f , -1.17f, -0.97f, 0.00f, -0.23f, -0.00f, -1.00f, 0.00f, 0.50f, 0.57f,
-3.93f , -2.86f , -1.17f, -0.79f, -0.57f, -0.23f, 0.59f, -0.81f, 0.00f, 0.60f, 0.57f,
-1.50f , -4.62f , -1.17f, -0.30f, -0.92f, -0.23f, 0.95f, -0.31f, 0.00f, 0.70f, 0.57f,
1.50f , -4.62f , -1.17f, 0.30f, -0.92f, -0.23f, 0.95f, 0.31f, 0.00f, 0.80f, 0.57f,
3.93f , -2.86f , -1.17f, 0.79f, -0.57f, -0.23f, 0.59f, 0.81f, 0.00f, 0.90f, 0.57f,
4.86f , 0.00f , -1.17f, 0.97f, 0.00f, -0.23f, -0.00f, 1.00f, 0.00f, 1.00f, 0.57f,

4.62f , 0.00f , -1.91f, 0.92f, 0.00f, -0.38f, -0.00f, 1.00f, 0.00f, 0.00f, 0.62f,
3.74f , 2.72f , -1.91f, 0.75f, 0.54f, -0.38f, -0.59f, 0.81f, 0.00f, 0.10f, 0.62f,
1.43f , 4.39f , -1.91f, 0.29f, 0.88f, -0.38f, -0.95f, 0.31f, 0.00f, 0.20f, 0.62f,
-1.43f , 4.39f , -1.91f, -0.29f, 0.88f, -0.38f, -0.95f, -0.31f, 0.00f, 0.30f, 0.62f,
-3.74f , 2.72f , -1.91f, -0.75f, 0.54f, -0.38f, -0.59f, -0.81f, 0.00f, 0.40f, 0.62f,
-4.62f , 0.00f , -1.91f, -0.92f, 0.00f, -0.38f, -0.00f, -1.00f, 0.00f, 0.50f, 0.62f,
-3.74f , -2.72f , -1.91f, -0.75f, -0.54f, -0.38f, 0.59f, -0.81f, 0.00f, 0.60f, 0.62f,
-1.43f , -4.39f , -1.91f, -0.29f, -0.88f, -0.38f, 0.95f, -0.31f, 0.00f, 0.70f, 0.62f, 
1.43f , -4.39f , -1.91f, 0.29f, -0.88f, -0.38f, 0.95f, 0.31f, 0.00f, 0.80f, 0.62f,
3.74f , -2.72f , -1.91f, 0.75f, -0.54f, -0.38f, 0.59f, 0.81f, 0.00f, 0.90f, 0.62f,
4.62f , 0.00f , -1.91f, 0.92f, 0.00f, -0.38f, -0.00f, 1.00f, 0.00f, 1.00f, 0.62f,

4.26f , 0.00f , -2.61f, 0.85f, 0.00f, -0.52f, -0.00f, 1.00f, 0.00f, 0.00f, 0.68f,
3.45f , 2.51f , -2.61f, 0.69f, 0.50f, -0.52f, -0.59f, 0.81f, 0.00f, 0.10f, 0.68f,
1.32f , 4.05f , -2.61f, 0.26f, 0.81f, -0.52f, -0.95f, 0.31f, 0.00f, 0.20f, 0.68f,
-1.32f , 4.05f , -2.61f, -0.26f, 0.81f, -0.52f, -0.95f, -0.31f, 0.00f, 0.30f, 0.68f,
-3.45f , 2.51f , -2.61f, -0.69f, 0.50f, -0.52f, -0.59f, -0.81f, 0.00f, 0.40f, 0.68f,
-4.26f , 0.00f , -2.61f, -0.85f, 0.00f, -0.52f, -0.00f, -1.00f, 0.00f, 0.50f, 0.68f,
-3.45f , -2.51f , -2.61f, -0.69f, -0.50f, -0.52f, 0.59f, -0.81f, 0.00f, 0.60f, 0.68f,
-1.32f , -4.05f , -2.61f, -0.26f, -0.81f, -0.52f, 0.95f, -0.31f, 0.00f, 0.70f, 0.68f,
1.32f , -4.05f , -2.61f, 0.26f, -0.81f, -0.52f, 0.95f, 0.31f, 0.00f, 0.80f, 0.68f,
3.45f , -2.51f , -2.61f, 0.69f, -0.50f, -0.52f, 0.59f, 0.81f, 0.00f, 0.90f, 0.68f,
4.26f , 0.00f , -2.61f, 0.85f, 0.00f, -0.52f, -0.00f, 1.00f, 0.00f, 1.00f, 0.68f,

3.80f , 0.00f , -3.25f, 0.76f, 0.00f, -0.65f, -0.00f, 1.00f, 0.00f, 0.00f, 0.72f,
3.08f , 2.23f , -3.25f, 0.62f, 0.45f, -0.65f, -0.59f, 0.81f, 0.00f, 0.10f, 0.72f,
1.17f , 3.62f , -3.25f, 0.23f, 0.72f, -0.65f, -0.95f, 0.31f, 0.00f, 0.20f, 0.72f,
-1.17f , 3.62f , -3.25f, -0.23f, 0.72f, -0.65f, -0.95f, -0.31f, 0.00f, 0.30f, 0.72f,
-3.08f , 2.23f , -3.25f, -0.62f, 0.45f, -0.65f, -0.59f, -0.81f, 0.00f, 0.40f, 0.72f,
-3.80f , 0.00f , -3.25f, -0.76f, 0.00f, -0.65f, -0.00f, -1.00f, 0.00f, 0.50f, 0.72f,
-3.08f , -2.23f , -3.25f, -0.62f, -0.45f, -0.65f, 0.59f, -0.81f, 0.00f, 0.60f, 0.72f,
-1.17f , -3.62f , -3.25f, -0.23f, -0.72f, -0.65f, 0.95f, -0.31f, 0.00f, 0.70f, 0.72f,
1.17f , -3.62f , -3.25f, 0.23f, -0.72f, -0.65f, 0.95f, 0.31f, 0.00f, 0.80f, 0.72f, 
3.08f , -2.23f , -3.25f, 0.62f, -0.45f, -0.65f, 0.59f, 0.81f, 0.00f, 0.90f, 0.72f,
3.80f , 0.00f , -3.25f, 0.76f, 0.00f, -0.65f, -0.00f, 1.00f, 0.00f, 1.00f, 0.72f,

3.25f , 0.00f , -3.80f, 0.65f, 0.00f, -0.76f, -0.00f, 1.00f, 0.00f, 0.00f, 0.78f,
2.63f , 1.91f , -3.80f, 0.53f, 0.38f, -0.76f, -0.59f, 0.81f, 0.00f, 0.10f, 0.78f,
1.00f , 3.09f , -3.80f, 0.20f, 0.62f, -0.76f, -0.95f, 0.31f, 0.00f, 0.20f, 0.78f,
-1.00f , 3.09f , -3.80f, -0.20f, 0.62f, -0.76f, -0.95f, -0.31f, 0.00f, 0.30f, 0.78f,
-2.63f , 1.91f , -3.80f, -0.53f, 0.38f, -0.76f, -0.59f, -0.81f, 0.00f, 0.40f, 0.78f,
-3.25f , 0.00f , -3.80f, -0.65f, 0.00f, -0.76f, -0.00f, -1.00f, 0.00f, 0.50f, 0.78f,
-2.63f , -1.91f , -3.80f, -0.53f, -0.38f, -0.76f, 0.59f, -0.81f, 0.00f, 0.60f, 0.78f,
-1.00f , -3.09f , -3.80f, -0.20f, -0.62f, -0.76f, 0.95f, -0.31f, 0.00f, 0.70f, 0.78f,
1.00f , -3.09f , -3.80f, 0.20f, -0.62f, -0.76f, 0.95f, 0.31f, 0.00f, 0.80f, 0.78f,
2.63f , -1.91f , -3.80f, 0.53f, -0.38f, -0.76f, 0.59f, 0.81f, 0.00f, 0.90f, 0.78f,
3.25f , 0.00f , -3.80f, 0.65f, 0.00f, -0.76f, -0.00f, 1.00f, 0.00f, 1.00f, 0.78f,

2.61f , 0.00f , -4.26f, 0.52f, 0.00f, -0.85f, -0.00f, 1.00f, 0.00f, 0.00f, 0.82f,
2.11f , 1.54f , -4.26f, 0.42f, 0.31f, -0.85f, -0.59f, 0.81f, 0.00f, 0.10f, 0.82f,
0.81f , 2.48f , -4.26f, 0.16f, 0.50f, -0.85f, -0.95f, 0.31f, 0.00f, 0.20f, 0.82f,
-0.81f , 2.48f , -4.26f, -0.16f, 0.50f, -0.85f, -0.95f, -0.31f, 0.00f, 0.30f, 0.82f,
-2.11f , 1.54f , -4.26f, -0.42f, 0.31f, -0.85f, -0.59f, -0.81f, 0.00f, 0.40f, 0.82f,
-2.61f , 0.00f , -4.26f, -0.52f, 0.00f, -0.85f, -0.00f, -1.00f, 0.00f, 0.50f, 0.82f,
-2.11f , -1.54f , -4.26f, -0.42f, -0.31f, -0.85f, 0.59f, -0.81f, 0.00f, 0.60f, 0.82f,
-0.81f , -2.48f , -4.26f, -0.16f, -0.50f, -0.85f, 0.95f, -0.31f, 0.00f, 0.70f, 0.82f,
0.81f , -2.48f , -4.26f, 0.16f, -0.50f, -0.85f, 0.95f, 0.31f, 0.00f, 0.80f, 0.82f,
2.11f , -1.54f , -4.26f, 0.42f, -0.31f, -0.85f, 0.59f, 0.81f, 0.00f, 0.90f, 0.82f,
2.61f , 0.00f , -4.26f, 0.52f, 0.00f, -0.85f, -0.00f, 1.00f, 0.00f, 1.00f, 0.82f,

1.91f , 0.00f , -4.62f, 0.38f, 0.00f, -0.92f, -0.00f, 1.00f, 0.00f, 0.00f, 0.88f, 
1.55f , 1.12f , -4.62f, 0.31f, 0.22f, -0.92f, -0.59f, 0.81f, 0.00f, 0.10f, 0.88f,
0.59f , 1.82f , -4.62f, 0.12f, 0.36f, -0.92f, -0.95f, 0.31f, 0.00f, 0.20f, 0.88f,
-0.59f , 1.82f , -4.62f, -0.12f, 0.36f, -0.92f, -0.95f, -0.31f, 0.00f, 0.30f, 0.88f,
-1.55f , 1.12f , -4.62f, -0.31f, 0.22f, -0.92f, -0.59f, -0.81f, 0.00f, 0.40f, 0.88f,
-1.91f , 0.00f , -4.62f, -0.38f, 0.00f, -0.92f, -0.00f, -1.00f, 0.00f, 0.50f, 0.88f,
-1.55f , -1.12f , -4.62f, -0.31f, -0.22f, -0.92f, 0.59f, -0.81f, 0.00f, 0.60f, 0.88f,
-0.59f , -1.82f , -4.62f, -0.12f, -0.36f, -0.92f, 0.95f, -0.31f, 0.00f, 0.70f, 0.88f,
0.59f , -1.82f , -4.62f, 0.12f, -0.36f, -0.92f, 0.95f, 0.31f, 0.00f, 0.80f, 0.88f,
1.55f , -1.12f , -4.62f, 0.31f, -0.22f, -0.92f, 0.59f, 0.81f, 0.00f, 0.90f, 0.88f,
1.91f , 0.00f , -4.62f, 0.38f, 0.00f, -0.92f, -0.00f, 1.00f, 0.00f, 1.00f, 0.88f,

1.17f , 0.00f , -4.86f, 0.23f, 0.00f, -0.97f, -0.00f, 1.00f, 0.00f, 0.00f, 0.93f,
0.94f , 0.69f , -4.86f, 0.19f, 0.14f, -0.97f, -0.59f, 0.81f, 0.00f, 0.10f, 0.93f,
0.36f , 1.11f , -4.86f, 0.07f, 0.22f, -0.97f, -0.95f, 0.31f, 0.00f, 0.20f, 0.93f,
-0.36f , 1.11f , -4.86f, -0.07f, 0.22f, -0.97f, -0.95f, -0.31f, 0.00f, 0.30f, 0.93f,
-0.94f , 0.69f , -4.86f, -0.19f, 0.14f, -0.97f, -0.59f, -0.81f, 0.00f, 0.40f, 0.93f,
-1.17f , 0.00f , -4.86f, -0.23f, 0.00f, -0.97f, -0.00f, -1.00f, 0.00f, 0.50f, 0.93f,
-0.94f , -0.69f , -4.86f, -0.19f, -0.14f, -0.97f, 0.59f, -0.81f, 0.00f, 0.60f, 0.93f,
-0.36f , -1.11f , -4.86f, -0.07f, -0.22f, -0.97f, 0.95f, -0.31f, 0.00f, 0.70f, 0.93f,
0.36f , -1.11f , -4.86f, 0.07f, -0.22f, -0.97f, 0.95f, 0.31f, 0.00f, 0.80f, 0.93f,
0.94f , -0.69f , -4.86f, 0.19f, -0.14f, -0.97f, 0.59f, 0.81f, 0.00f, 0.90f, 0.93f,
1.17f , 0.00f , -4.86f, 0.23f, 0.00f, -0.97f, -0.00f, 1.00f, 0.00f, 1.00f, 0.93f,

0.39f , 0.00f , -4.98f, 0.08f, 0.00f, -1.00f, -0.00f, 1.00f, 0.00f, 0.00f, 0.97f,
0.32f , 0.23f , -4.98f, 0.06f, 0.05f, -1.00f, -0.59f, 0.81f, 0.00f, 0.10f, 0.97f, 
0.12f , 0.37f , -4.98f, 0.02f, 0.07f, -1.00f, -0.95f, 0.31f, 0.00f, 0.20f, 0.97f,
-0.12f , 0.37f , -4.98f, -0.02f, 0.07f, -1.00f, -0.95f, -0.31f, 0.00f, 0.30f, 0.97f,
-0.32f , 0.23f , -4.98f, -0.06f, 0.05f, -1.00f, -0.59f, -0.81f, 0.00f, 0.40f, 0.97f,
-0.39f , 0.00f , -4.98f, -0.08f, 0.00f, -1.00f, -0.00f, -1.00f, 0.00f, 0.50f, 0.97f,
-0.32f , -0.23f , -4.98f, -0.06f, -0.05f, -1.00f, 0.59f, -0.81f, 0.00f, 0.60f, 0.97f,
-0.12f , -0.37f , -4.98f, -0.02f, -0.07f, -1.00f, 0.95f, -0.31f, 0.00f, 0.70f, 0.97f,
0.12f , -0.37f , -4.98f, 0.02f, -0.07f, -1.00f, 0.95f, 0.31f, 0.00f, 0.80f, 0.97f,
0.32f , -0.23f , -4.98f, 0.06f, -0.05f, -1.00f, 0.59f, 0.81f, 0.00f, 0.90f, 0.97f,
0.39f , 0.00f , -4.98f, 0.08f, 0.00f, -1.00f, -0.00f, 1.00f, 0.00f, 1.00f, 0.97f,
};

float planeVertices []={

    -8.00f, -2.00f,  8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
     8.00f, -2.00f,  8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  4.0f, 0.0f,
     8.00f, -2.00f, -8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  4.0f, 4.0f,
    -8.00f, -2.00f,  8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 0.0f,
     8.00f, -2.00f, -8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  4.0f, 4.0f,
    -8.00f, -2.00f, -8.00f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f, 4.0f,};

/*============= CONE POINTS CALCULATED THROUGH CODE BELOW ===============
#include <iostream>
#include <cmath>
#include <iomanip>

using namespace std;

double PI = 3.14159265358979323846;

int main()
{
    double radius = 5.0; // radius of the circle
    double centerX = 0.0; // x-coordinate of the center of the circle
    double centerY = 0.0; // y-coordinate of the center of the circle
    double centerZ = 0.0; // z-coordinate of the center of the circle
    
    int numPoints = 10; // number of points to generate
    
    // loop through and generate the coordinates of the points on the circle
    for (int i = 0; i < numPoints; i++)
    {
        double angle = (2.0 * PI * i) / numPoints;
        double x = centerX + (radius * cos(angle));
        double y = centerY + (radius * sin(angle));
        double z = centerZ;
        double radius = 5.0; // radius of the circle
        double centerX = 0.0; // x-coordinate of the center of the circle
        double centerY = 0.0; // y-coordinate of the center of the circle
        double centerZ = 0.0; // z-coordinate of the center of the circle
        
        int numPoints = 100; // number of points to generate
        
        // calculate the normal and tangent vectors
        double nx = -sin(angle);
        double ny = cos(angle);
        double nz = 0.0;
        double tx = cos(angle);
        double ty = sin(angle);
        double tz = 0.0;
        // loop through and generate the coordinates of the points on the circle
        for (int i = 0; i < numPoints; i++)
        {
            double angle = (2.0 * PI * i) / numPoints;
            double x = centerX + (radius * cos(angle));
            double y = centerY + (radius * sin(angle));
            double z = centerZ;
            
            // calculate the normal and tangent vectors
            double normx = -sin(angle);
            double normy = cos(angle);
            double normz = 0.0;
            double tanx = cos(angle);
            double tany = sin(angle);
            double tanz = 0.0;
            double s = angle/(2*PI);
            double t = (5 - z) / 5;

            // output the point coordinates, normal vector, and tangent vector
            cout << fixed << setprecision(2) << x << "f , " << y << "f , " << z << "f, "
                << normx << "f, " << normy << "f, " << normz << "f, "
                << tanx << "f, " << tany << "f, " << tanz << "f, "<< 
                s <<"f, "<< t << "f, "<< endl;
        }
        
        // output the point coordinates, normal vector, and tangent vector
        cout << fixed << setprecision(2) << x << "f , " << y << "f , " << z << "f, "
            << nx << "f, " << ny << "f, " << nz << "f, "
            << tx << "f, " << ty << "f, " << tz << "f, " << 
            "1.0f, 0.0f,"<< endl;
        return 0;
    }
    
    return 0;
}*/

/* ============= CONE VERTICES FROM PAST EXERCISE ===============*/
float coneVertices []=
{
    0.00f , 0.00f , 15.00f, -0.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.00f, 0.50f, 0.50f,

    5.00f , 0.00f , 0.00f, -0.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.00f, 0.00f, 1.00f, 
    4.99f , 0.31f , 0.00f, -0.06f, 1.00f, 0.00f, 1.00f, 0.06f, 0.00f, 0.01f, 1.00f, 
    4.96f , 0.63f , 0.00f, -0.13f, 0.99f, 0.00f, 0.99f, 0.13f, 0.00f, 0.02f, 1.00f, 
    4.91f , 0.94f , 0.00f, -0.19f, 0.98f, 0.00f, 0.98f, 0.19f, 0.00f, 0.03f, 1.00f, 
    4.84f , 1.24f , 0.00f, -0.25f, 0.97f, 0.00f, 0.97f, 0.25f, 0.00f, 0.04f, 1.00f, 
    4.76f , 1.55f , 0.00f, -0.31f, 0.95f, 0.00f, 0.95f, 0.31f, 0.00f, 0.05f, 1.00f, 
    4.65f , 1.84f , 0.00f, -0.37f, 0.93f, 0.00f, 0.93f, 0.37f, 0.00f, 0.06f, 1.00f, 
    4.52f , 2.13f , 0.00f, -0.43f, 0.90f, 0.00f, 0.90f, 0.43f, 0.00f, 0.07f, 1.00f, 
    4.38f , 2.41f , 0.00f, -0.48f, 0.88f, 0.00f, 0.88f, 0.48f, 0.00f, 0.08f, 1.00f, 
    4.22f , 2.68f , 0.00f, -0.54f, 0.84f, 0.00f, 0.84f, 0.54f, 0.00f, 0.09f, 1.00f, 
    4.05f , 2.94f , 0.00f, -0.59f, 0.81f, 0.00f, 0.81f, 0.59f, 0.00f, 0.10f, 1.00f, 
    3.85f , 3.19f , 0.00f, -0.64f, 0.77f, 0.00f, 0.77f, 0.64f, 0.00f, 0.11f, 1.00f, 
    3.64f , 3.42f , 0.00f, -0.68f, 0.73f, 0.00f, 0.73f, 0.68f, 0.00f, 0.12f, 1.00f, 
    3.42f , 3.64f , 0.00f, -0.73f, 0.68f, 0.00f, 0.68f, 0.73f, 0.00f, 0.13f, 1.00f, 
    3.19f , 3.85f , 0.00f, -0.77f, 0.64f, 0.00f, 0.64f, 0.77f, 0.00f, 0.14f, 1.00f, 
    2.94f , 4.05f , 0.00f, -0.81f, 0.59f, 0.00f, 0.59f, 0.81f, 0.00f, 0.15f, 1.00f, 
    2.68f , 4.22f , 0.00f, -0.84f, 0.54f, 0.00f, 0.54f, 0.84f, 0.00f, 0.16f, 1.00f, 
    2.41f , 4.38f , 0.00f, -0.88f, 0.48f, 0.00f, 0.48f, 0.88f, 0.00f, 0.17f, 1.00f, 
    2.13f , 4.52f , 0.00f, -0.90f, 0.43f, 0.00f, 0.43f, 0.90f, 0.00f, 0.18f, 1.00f, 
    1.84f , 4.65f , 0.00f, -0.93f, 0.37f, 0.00f, 0.37f, 0.93f, 0.00f, 0.19f, 1.00f, 
    1.55f , 4.76f , 0.00f, -0.95f, 0.31f, 0.00f, 0.31f, 0.95f, 0.00f, 0.20f, 1.00f, 
    1.24f , 4.84f , 0.00f, -0.97f, 0.25f, 0.00f, 0.25f, 0.97f, 0.00f, 0.21f, 1.00f, 
    0.94f , 4.91f , 0.00f, -0.98f, 0.19f, 0.00f, 0.19f, 0.98f, 0.00f, 0.22f, 1.00f, 
    0.63f , 4.96f , 0.00f, -0.99f, 0.13f, 0.00f, 0.13f, 0.99f, 0.00f, 0.23f, 1.00f, 
    0.31f , 4.99f , 0.00f, -1.00f, 0.06f, 0.00f, 0.06f, 1.00f, 0.00f, 0.24f, 1.00f, 
    0.00f , 5.00f , 0.00f, -1.00f, 0.00f, 0.00f, 0.00f, 1.00f, 0.00f, 0.25f, 1.00f, 
    -0.31f , 4.99f , 0.00f, -1.00f, -0.06f, 0.00f, -0.06f, 1.00f, 0.00f, 0.26f, 1.00f, 
    -0.63f , 4.96f , 0.00f, -0.99f, -0.13f, 0.00f, -0.13f, 0.99f, 0.00f, 0.27f, 1.00f, 
    -0.94f , 4.91f , 0.00f, -0.98f, -0.19f, 0.00f, -0.19f, 0.98f, 0.00f, 0.28f, 1.00f, 
    -1.24f , 4.84f , 0.00f, -0.97f, -0.25f, 0.00f, -0.25f, 0.97f, 0.00f, 0.29f, 1.00f, 
    -1.55f , 4.76f , 0.00f, -0.95f, -0.31f, 0.00f, -0.31f, 0.95f, 0.00f, 0.30f, 1.00f, 
    -1.84f , 4.65f , 0.00f, -0.93f, -0.37f, 0.00f, -0.37f, 0.93f, 0.00f, 0.31f, 1.00f, 
    -2.13f , 4.52f , 0.00f, -0.90f, -0.43f, 0.00f, -0.43f, 0.90f, 0.00f, 0.32f, 1.00f, 
    -2.41f , 4.38f , 0.00f, -0.88f, -0.48f, 0.00f, -0.48f, 0.88f, 0.00f, 0.33f, 1.00f, 
    -2.68f , 4.22f , 0.00f, -0.84f, -0.54f, 0.00f, -0.54f, 0.84f, 0.00f, 0.34f, 1.00f, 
    -2.94f , 4.05f , 0.00f, -0.81f, -0.59f, 0.00f, -0.59f, 0.81f, 0.00f, 0.35f, 1.00f, 
    -3.19f , 3.85f , 0.00f, -0.77f, -0.64f, 0.00f, -0.64f, 0.77f, 0.00f, 0.36f, 1.00f, 
    -3.42f , 3.64f , 0.00f, -0.73f, -0.68f, 0.00f, -0.68f, 0.73f, 0.00f, 0.37f, 1.00f, 
    -3.64f , 3.42f , 0.00f, -0.68f, -0.73f, 0.00f, -0.73f, 0.68f, 0.00f, 0.38f, 1.00f, 
    -3.85f , 3.19f , 0.00f, -0.64f, -0.77f, 0.00f, -0.77f, 0.64f, 0.00f, 0.39f, 1.00f, 
    -4.05f , 2.94f , 0.00f, -0.59f, -0.81f, 0.00f, -0.81f, 0.59f, 0.00f, 0.40f, 1.00f, 
    -4.22f , 2.68f , 0.00f, -0.54f, -0.84f, 0.00f, -0.84f, 0.54f, 0.00f, 0.41f, 1.00f, 
    -4.38f , 2.41f , 0.00f, -0.48f, -0.88f, 0.00f, -0.88f, 0.48f, 0.00f, 0.42f, 1.00f, 
    -4.52f , 2.13f , 0.00f, -0.43f, -0.90f, 0.00f, -0.90f, 0.43f, 0.00f, 0.43f, 1.00f, 
    -4.65f , 1.84f , 0.00f, -0.37f, -0.93f, 0.00f, -0.93f, 0.37f, 0.00f, 0.44f, 1.00f, 
    -4.76f , 1.55f , 0.00f, -0.31f, -0.95f, 0.00f, -0.95f, 0.31f, 0.00f, 0.45f, 1.00f, 
    -4.84f , 1.24f , 0.00f, -0.25f, -0.97f, 0.00f, -0.97f, 0.25f, 0.00f, 0.46f, 1.00f, 
    -4.91f , 0.94f , 0.00f, -0.19f, -0.98f, 0.00f, -0.98f, 0.19f, 0.00f, 0.47f, 1.00f, 
    -4.96f , 0.63f , 0.00f, -0.13f, -0.99f, 0.00f, -0.99f, 0.13f, 0.00f, 0.48f, 1.00f, 
    -4.99f , 0.31f , 0.00f, -0.06f, -1.00f, 0.00f, -1.00f, 0.06f, 0.00f, 0.49f, 1.00f, 
    -5.00f , 0.00f , 0.00f, -0.00f, -1.00f, 0.00f, -1.00f, 0.00f, 0.00f, 0.50f, 1.00f, 
    -4.99f , -0.31f , 0.00f, 0.06f, -1.00f, 0.00f, -1.00f, -0.06f, 0.00f, 0.51f, 1.00f, 
    -4.96f , -0.63f , 0.00f, 0.13f, -0.99f, 0.00f, -0.99f, -0.13f, 0.00f, 0.52f, 1.00f, 
    -4.91f , -0.94f , 0.00f, 0.19f, -0.98f, 0.00f, -0.98f, -0.19f, 0.00f, 0.53f, 1.00f, 
    -4.84f , -1.24f , 0.00f, 0.25f, -0.97f, 0.00f, -0.97f, -0.25f, 0.00f, 0.54f, 1.00f, 
    -4.76f , -1.55f , 0.00f, 0.31f, -0.95f, 0.00f, -0.95f, -0.31f, 0.00f, 0.55f, 1.00f, 
    -4.65f , -1.84f , 0.00f, 0.37f, -0.93f, 0.00f, -0.93f, -0.37f, 0.00f, 0.56f, 1.00f, 
    -4.52f , -2.13f , 0.00f, 0.43f, -0.90f, 0.00f, -0.90f, -0.43f, 0.00f, 0.57f, 1.00f, 
    -4.38f , -2.41f , 0.00f, 0.48f, -0.88f, 0.00f, -0.88f, -0.48f, 0.00f, 0.58f, 1.00f, 
    -4.22f , -2.68f , 0.00f, 0.54f, -0.84f, 0.00f, -0.84f, -0.54f, 0.00f, 0.59f, 1.00f, 
    -4.05f , -2.94f , 0.00f, 0.59f, -0.81f, 0.00f, -0.81f, -0.59f, 0.00f, 0.60f, 1.00f, 
    -3.85f , -3.19f , 0.00f, 0.64f, -0.77f, 0.00f, -0.77f, -0.64f, 0.00f, 0.61f, 1.00f, 
    -3.64f , -3.42f , 0.00f, 0.68f, -0.73f, 0.00f, -0.73f, -0.68f, 0.00f, 0.62f, 1.00f, 
    -3.42f , -3.64f , 0.00f, 0.73f, -0.68f, 0.00f, -0.68f, -0.73f, 0.00f, 0.63f, 1.00f, 
    -3.19f , -3.85f , 0.00f, 0.77f, -0.64f, 0.00f, -0.64f, -0.77f, 0.00f, 0.64f, 1.00f, 
    -2.94f , -4.05f , 0.00f, 0.81f, -0.59f, 0.00f, -0.59f, -0.81f, 0.00f, 0.65f, 1.00f, 
    -2.68f , -4.22f , 0.00f, 0.84f, -0.54f, 0.00f, -0.54f, -0.84f, 0.00f, 0.66f, 1.00f, 
    -2.41f , -4.38f , 0.00f, 0.88f, -0.48f, 0.00f, -0.48f, -0.88f, 0.00f, 0.67f, 1.00f, 
    -2.13f , -4.52f , 0.00f, 0.90f, -0.43f, 0.00f, -0.43f, -0.90f, 0.00f, 0.68f, 1.00f, 
    -1.84f , -4.65f , 0.00f, 0.93f, -0.37f, 0.00f, -0.37f, -0.93f, 0.00f, 0.69f, 1.00f, 
    -1.55f , -4.76f , 0.00f, 0.95f, -0.31f, 0.00f, -0.31f, -0.95f, 0.00f, 0.70f, 1.00f, 
    -1.24f , -4.84f , 0.00f, 0.97f, -0.25f, 0.00f, -0.25f, -0.97f, 0.00f, 0.71f, 1.00f, 
    -0.94f , -4.91f , 0.00f, 0.98f, -0.19f, 0.00f, -0.19f, -0.98f, 0.00f, 0.72f, 1.00f, 
    -0.63f , -4.96f , 0.00f, 0.99f, -0.13f, 0.00f, -0.13f, -0.99f, 0.00f, 0.73f, 1.00f, 
    -0.31f , -4.99f , 0.00f, 1.00f, -0.06f, 0.00f, -0.06f, -1.00f, 0.00f, 0.74f, 1.00f, 
    -0.00f , -5.00f , 0.00f, 1.00f, -0.00f, 0.00f, -0.00f, -1.00f, 0.00f, 0.75f, 1.00f, 
    0.31f , -4.99f , 0.00f, 1.00f, 0.06f, 0.00f, 0.06f, -1.00f, 0.00f, 0.76f, 1.00f, 
    0.63f , -4.96f , 0.00f, 0.99f, 0.13f, 0.00f, 0.13f, -0.99f, 0.00f, 0.77f, 1.00f, 
    0.94f , -4.91f , 0.00f, 0.98f, 0.19f, 0.00f, 0.19f, -0.98f, 0.00f, 0.78f, 1.00f, 
    1.24f , -4.84f , 0.00f, 0.97f, 0.25f, 0.00f, 0.25f, -0.97f, 0.00f, 0.79f, 1.00f, 
    1.55f , -4.76f , 0.00f, 0.95f, 0.31f, 0.00f, 0.31f, -0.95f, 0.00f, 0.80f, 1.00f, 
    1.84f , -4.65f , 0.00f, 0.93f, 0.37f, 0.00f, 0.37f, -0.93f, 0.00f, 0.81f, 1.00f, 
    2.13f , -4.52f , 0.00f, 0.90f, 0.43f, 0.00f, 0.43f, -0.90f, 0.00f, 0.82f, 1.00f, 
    2.41f , -4.38f , 0.00f, 0.88f, 0.48f, 0.00f, 0.48f, -0.88f, 0.00f, 0.83f, 1.00f, 
    2.68f , -4.22f , 0.00f, 0.84f, 0.54f, 0.00f, 0.54f, -0.84f, 0.00f, 0.84f, 1.00f, 
    2.94f , -4.05f , 0.00f, 0.81f, 0.59f, 0.00f, 0.59f, -0.81f, 0.00f, 0.85f, 1.00f, 
    3.19f , -3.85f , 0.00f, 0.77f, 0.64f, 0.00f, 0.64f, -0.77f, 0.00f, 0.86f, 1.00f, 
    3.42f , -3.64f , 0.00f, 0.73f, 0.68f, 0.00f, 0.68f, -0.73f, 0.00f, 0.87f, 1.00f, 
    3.64f , -3.42f , 0.00f, 0.68f, 0.73f, 0.00f, 0.73f, -0.68f, 0.00f, 0.88f, 1.00f, 
    3.85f , -3.19f , 0.00f, 0.64f, 0.77f, 0.00f, 0.77f, -0.64f, 0.00f, 0.89f, 1.00f, 
    4.05f , -2.94f , 0.00f, 0.59f, 0.81f, 0.00f, 0.81f, -0.59f, 0.00f, 0.90f, 1.00f, 
    4.22f , -2.68f , 0.00f, 0.54f, 0.84f, 0.00f, 0.84f, -0.54f, 0.00f, 0.91f, 1.00f, 
    4.38f , -2.41f , 0.00f, 0.48f, 0.88f, 0.00f, 0.88f, -0.48f, 0.00f, 0.92f, 1.00f, 
    4.52f , -2.13f , 0.00f, 0.43f, 0.90f, 0.00f, 0.90f, -0.43f, 0.00f, 0.93f, 1.00f, 
    4.65f , -1.84f , 0.00f, 0.37f, 0.93f, 0.00f, 0.93f, -0.37f, 0.00f, 0.94f, 1.00f, 
    4.76f , -1.55f , 0.00f, 0.31f, 0.95f, 0.00f, 0.95f, -0.31f, 0.00f, 0.95f, 1.00f, 
    4.84f , -1.24f , 0.00f, 0.25f, 0.97f, 0.00f, 0.97f, -0.25f, 0.00f, 0.96f, 1.00f, 
    4.91f , -0.94f , 0.00f, 0.19f, 0.98f, 0.00f, 0.98f, -0.19f, 0.00f, 0.97f, 1.00f, 
    4.96f , -0.63f , 0.00f, 0.13f, 0.99f, 0.00f, 0.99f, -0.13f, 0.00f, 0.98f, 1.00f, 
    4.99f , -0.31f , 0.00f, 0.06f, 1.00f, 0.00f, 1.00f, -0.06f, 0.00f, 0.99f, 1.00f, 
    
    5.00f , 0.00f , 0.00f, -0.00f, 1.00f, 0.00f, 1.00f, 0.00f, 0.00f, 1.00f, 1.00f,

};

/* ===== INDICES GENERATED THROUGH CODE BELOW =====
#include <iostream>
#include <cmath>
#include <iomanip>

using namespace std;

double PI = 3.14159265358979323846;

int main()
{
    int numCircles = 20; // number of circles to generate
    int numPoints = 10; // number of points to generate

    int numIndices = (numCircles-1) * numPoints * 6; // number of indices needed for all triangles
    int* indices = new int[numIndices]; // allocate memory for indices array

    int idx = 0;
    for (int j = 0; j < numCircles-1; j++) // loop through each circle except the last one
    {
        for (int i = 0; i < numPoints; i++) // loop through each point on the circle
        {
            int k = j * numPoints + i; // index of current point
            int next_k = (j + 1) * numPoints + i; // index of corresponding point on next circle

            // indices of the four vertices of the current quad
            int v1 = k;
            int v2 = k + 1;
            int v3 = next_k;
            int v4 = next_k + 1;

            // wrap around for last point on circle
            if (i == numPoints - 1) {
                v2 -= numPoints;
                v4 -= numPoints;
            }

            // add indices for first triangle
            indices[idx++] = v1;
            indices[idx++] = v3;
            indices[idx++] = v2;

            // add indices for second triangle
            indices[idx++] = v2;
            indices[idx++] = v3;
            indices[idx++] = v4;
        }
    }

    // output the indices array with 3 points per line
    for (int i = 0; i < numIndices; i++) {
        cout << indices[i] << ",";
        if ((i+1) % 3 == 0) {
            cout << endl; // start a new line after every third index
        }
    }

    delete[] indices; // free memory allocated for indices array
    return 0;
}

*/
GLuint planeIndices[] =
{
    0,11,1,
    1,11,12,
    1,12,2,
    2,12,13,
    2,13,3,
    3,13,14,
    3,14,4,
    4,14,15,
    4,15,5,
    5,15,16,
    5,16,6,
    6,16,17,
    6,17,7,
    7,17,18,
    7,18,8,
    8,18,19,
    8,19,9,
    9,19,20,
    9,20,10,
    10,20,21,
    10,21,0,
    0,21,11,
    11,22,12,
    12,22,23,
    12,23,13,
    13,23,24,
    13,24,14,
    14,24,25,
    14,25,15,
    15,25,26,
    15,26,16,
    16,26,27,
    16,27,17,
    17,27,28,
    17,28,18,
    18,28,29,
    18,29,19,
    19,29,30,
    19,30,20,
    20,30,31,
    20,31,21,
    21,31,32,
    21,32,11,
    11,32,22,
    22,33,23,
    23,33,34,
    23,34,24,
    24,34,35,
    24,35,25,
    25,35,36,
    25,36,26,
    26,36,37,
    26,37,27,
    27,37,38,
    27,38,28,
    28,38,39,
    28,39,29,
    29,39,40,
    29,40,30,
    30,40,41,
    30,41,31,
    31,41,42,
    31,42,32,
    32,42,43,
    32,43,22,
    22,43,33,
    33,44,34,
    34,44,45,
    34,45,35,
    35,45,46,
    35,46,36,
    36,46,47,
    36,47,37,
    37,47,48,
    37,48,38,
    38,48,49,
    38,49,39,
    39,49,50,
    39,50,40,
    40,50,51,
    40,51,41,
    41,51,52,
    41,52,42,
    42,52,53,
    42,53,43,
    43,53,54,
    43,54,33,
    33,54,44,
    44,55,45,
    45,55,56,
    45,56,46,
    46,56,57,
    46,57,47,
    47,57,58,
    47,58,48,
    48,58,59,
    48,59,49,
    49,59,60,
    49,60,50,
    50,60,61,
    50,61,51,
    51,61,62,
    51,62,52,
    52,62,63,
    52,63,53,
    53,63,64,
    53,64,54,
    54,64,65,
    54,65,44,
    44,65,55,
    55,66,56,
    56,66,67,
    56,67,57,
    57,67,68,
    57,68,58,
    58,68,69,
    58,69,59,
    59,69,70,
    59,70,60,
    60,70,71,
    60,71,61,
    61,71,72,
    61,72,62,
    62,72,73,
    62,73,63,
    63,73,74,
    63,74,64,
    64,74,75,
    64,75,65,
    65,75,76,
    65,76,55,
    55,76,66,
    66,77,67,
    67,77,78,
    67,78,68,
    68,78,79,
    68,79,69,
    69,79,80,
    69,80,70,
    70,80,81,
    70,81,71,
    71,81,82,
    71,82,72,
    72,82,83,
    72,83,73,
    73,83,84,
    73,84,74,
    74,84,85,
    74,85,75,
    75,85,86,
    75,86,76,
    76,86,87,
    76,87,66,
    66,87,77,
    77,88,78,
    78,88,89,
    78,89,79,
    79,89,90,
    79,90,80,
    80,90,91,
    80,91,81,
    81,91,92,
    81,92,82,
    82,92,93,
    82,93,83,
    83,93,94,
    83,94,84,
    84,94,95,
    84,95,85,
    85,95,96,
    85,96,86,
    86,96,97,
    86,97,87,
    87,97,98,
    87,98,77,
    77,98,88,
    88,99,89,
    89,99,100,
    89,100,90,
    90,100,101,
    90,101,91,
    91,101,102,
    91,102,92,
    92,102,103,
    92,103,93,
    93,103,104,
    93,104,94,
    94,104,105,
    94,105,95,
    95,105,106,
    95,106,96,
    96,106,107,
    96,107,97,
    97,107,108,
    97,108,98,
    98,108,109,
    98,109,88,
    88,109,99,
    99,110,100,
    100,110,111,
    100,111,101,
    101,111,112,
    101,112,102,
    102,112,113,
    102,113,103,
    103,113,114,
    103,114,104,
    104,114,115,
    104,115,105,
    105,115,116,
    105,116,106,
    106,116,117,
    106,117,107,
    107,117,118,
    107,118,108,
    108,118,119,
    108,119,109,
    109,119,120,
    109,120,99,
    99,120,110,
    110,121,111,
    111,121,122,
    111,122,112,
    112,122,123,
    112,123,113,
    113,123,124,
    113,124,114,
    114,124,125,
    114,125,115,
    115,125,126,
    115,126,116,
    116,126,127,
    116,127,117,
    117,127,128,
    117,128,118,
    118,128,129,
    118,129,119,
    119,129,130,
    119,130,120,
    120,130,131,
    120,131,110,
    110,131,121,
    121,132,122,
    122,132,133,
    122,133,123,
    123,133,134,
    123,134,124,
    124,134,135,
    124,135,125,
    125,135,136,
    125,136,126,
    126,136,137,
    126,137,127,
    127,137,138,
    127,138,128,
    128,138,139,
    128,139,129,
    129,139,140,
    129,140,130,
    130,140,141,
    130,141,131,
    131,141,142,
    131,142,121,
    121,142,132,
    132,143,133,
    133,143,144,
    133,144,134,
    134,144,145,
    134,145,135,
    135,145,146,
    135,146,136,
    136,146,147,
    136,147,137,
    137,147,148,
    137,148,138,
    138,148,149,
    138,149,139,
    139,149,150,
    139,150,140,
    140,150,151,
    140,151,141,
    141,151,152,
    141,152,142,
    142,152,153,
    142,153,132,
    132,153,143,
    143,154,144,
    144,154,155,
    144,155,145,
    145,155,156,
    145,156,146,
    146,156,157,
    146,157,147,
    147,157,158,
    147,158,148,
    148,158,159,
    148,159,149,
    149,159,160,
    149,160,150,
    150,160,161,
    150,161,151,
    151,161,162,
    151,162,152,
    152,162,163,
    152,163,153,
    153,163,164,
    153,164,143,
    143,164,154,
    154,165,155,
    155,165,166,
    155,166,156,
    156,166,167,
    156,167,157,
    157,167,168,
    157,168,158,
    158,168,169,
    158,169,159,
    159,169,170,
    159,170,160,
    160,170,171,
    160,171,161,
    161,171,172,
    161,172,162,
    162,172,173,
    162,173,163,
    163,173,174,
    163,174,164,
    164,174,175,
    164,175,154,
    154,175,165,
    165,176,166,
    166,176,177,
    166,177,167,
    167,177,178,
    167,178,168,
    168,178,179,
    168,179,169,
    169,179,180,
    169,180,170,
    170,180,181,
    170,181,171,
    171,181,182,
    171,182,172,
    172,182,183,
    172,183,173,
    173,183,184,
    173,184,174,
    174,184,185,
    174,185,175,
    175,185,186,
    175,186,165,
    165,186,176,
    176,187,177,
    177,187,188,
    177,188,178,
    178,188,189,
    178,189,179,
    179,189,190,
    179,190,180,
    180,190,191,
    180,191,181,
    181,191,192,
    181,192,182,
    182,192,193,
    182,193,183,
    183,193,194,
    183,194,184,
    184,194,195,
    184,195,185,
    185,195,196,
    185,196,186,
    186,196,197,
    186,197,176,
    176,197,187,
    187,198,188,
    188,198,199,
    188,199,189,
    189,199,200,
    189,200,190,
    190,200,201,
    190,201,191,
    191,201,202,
    191,202,192,
    192,202,203,
    192,203,193,
    193,203,204,
    193,204,194,
    194,204,205,
    194,205,195,
    195,205,206,
    195,206,196,
    196,206,207,
    196,207,197,
    197,207,208,
    197,208,187,
    187,208,198,
    198,209,199,
    199,209,210,
    199,210,200,
    200,210,211,
    200,211,201,
    201,211,212,
    201,212,202,
    202,212,213,
    202,213,203,
    203,213,214,
    203,214,204,
    204,214,215,
    204,215,205,
    205,215,216,
    205,216,206,
    206,216,217,
    206,217,207,
    207,217,218,
    207,218,208,
    208,218,219,
    208,219,198,
    198,219,209,
};

float rectangleVertices[] =
{
	// Coords    // texCoords
	 1.0f, -1.0f,  1.0f, 0.0f,
	-1.0f, -1.0f,  0.0f, 0.0f,
	-1.0f,  1.0f,  0.0f, 1.0f,

	 1.0f,  1.0f,  1.0f, 1.0f,
	 1.0f, -1.0f,  1.0f, 0.0f,
	-1.0f,  1.0f,  0.0f, 1.0f
};

// CUSTOM FRAMEBUFFER CODE

float screenQuadVertices[] =   // vertices for a fullscreen quadrilateral
{
    // position   texcoords
    -1.0f, -1.0f, 0.0f, 0.0f,
     1.0f, -1.0f, 1.0f, 0.0f,
     1.0f,  1.0f, 1.0f, 1.0f,
    -1.0f,  1.0f, 0.0f, 1.0f
};

GLuint fbo;         // framebuffer object
GLuint fboTexture;  // texture for the framebuffer
GLuint fboRbo;      // renderbuffer for the framebuffer
GLuint fboVao;      // vertex array object for the fullscreen quadrilateral
GLuint fboVbo;      // vertex buffer object for the fullscreen quadrilateral
GLuint fboShader;   // shader for the fullscreen quadrilateral

#define SHADOW_SIZE 1024
GLuint shadowMapFbo;      // shadow map framebuffer object
GLuint shadowMapTexture;  // shadow map texture
GLuint shadowMapRbo;
GLuint shadowMapShader;   // shadow map shader


bool setupFbo()
{
    // create the framebuffer object
    glGenFramebuffers(1, &fbo);
    glBindFramebuffer(GL_FRAMEBUFFER, fbo);

    // attach a texture object to the framebuffer
    glGenTextures(1, &fboTexture);
    glBindTexture(GL_TEXTURE_2D, fboTexture);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, WINDOW_WIDTH, WINDOW_HEIGHT, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, fboTexture, 0);

    // attach a renderbuffer object (containing a depth buffer) to the framebuffer
    glGenRenderbuffers(1, &fboRbo);
    glBindRenderbuffer(GL_RENDERBUFFER, fboRbo);
    glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16, WINDOW_WIDTH, WINDOW_HEIGHT);
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, fboRbo);

    // check if we did everything right
    if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)
    {
        std::cout << "Could not create custom framebuffer.\n";
        return false;
    }

    // create the VAO and VBO for the fullscreen quadrilateral
    glGenVertexArrays(1, &fboVao);
    glGenBuffers(1, &fboVbo);
    glBindVertexArray(fboVao);
    glBindBuffer(GL_ARRAY_BUFFER, fboVbo);
    glBufferData(GL_ARRAY_BUFFER, sizeof(screenQuadVertices), screenQuadVertices, GL_STATIC_DRAW);
    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(float), (void*) 0);
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(float), (void*) (2 * sizeof(float)));
    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);

    // load the shader program for the fullscreen quadrilateral
    fboShader = gdevLoadShader("demo7.vs", "demo7.fs");
    if (! fboShader)
        return false;

    // set the framebuffer back to the default onscreen buffer
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
    return true;
}

void renderFbo()
{
    // set the framebuffer back to the default onscreen buffer
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    // always draw to the whole window
    int width, height;
    glfwGetFramebufferSize(pWindow, &width, &height);
    glViewport(0, 0, width, height);

    // clear the onscreen buffer
    // (the clear color does not matter because we're filling the window with our framebuffer texture)
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // using the framebuffer shader...
    glUseProgram(fboShader);

    // ... set the active texture to our framebuffer texture...
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, fboTexture);

    // ... then draw our fullscreen quadrilateral
    glBindVertexArray(fboVao);
    glDrawArrays(GL_TRIANGLE_FAN, 0, sizeof(screenQuadVertices) / (4 * sizeof(float)));
}

// CUSTOM FRAMEBUFFER CODE

// helper struct for defining spherical polar coordinates
struct polar
{
    float radius      =   8.0f;   // distance from the origin
    float inclination = -20.0f;   // angle on the YZ vertical plane
    float azimuth     =  45.0f;   // angle on the XZ horizontal plane

    // sanity ranges to prevent strange behavior like flipping axes, etc.
    // (you can change these as you see fit)
    static constexpr float minRadius      =   0.1f;
    static constexpr float maxRadius      =  20.0f;
    static constexpr float minInclination = -89.0f;
    static constexpr float maxInclination =  89.0f;

    // restricts the coordinates to sanity ranges
    void clamp()
    {
        if (radius < minRadius)
            radius = minRadius;
        if (radius > maxRadius)
            radius = maxRadius;
        if (inclination < minInclination)
            inclination = minInclination;
        if (inclination > maxInclination)
            inclination = maxInclination;
    }

    // converts the spherical polar coordinates to a vec3 in Cartesian coordinates
    glm::vec3 toCartesian()
    {
        glm::mat4 mat = glm::mat4(1.0f);  // set to identity first
        mat = glm::rotate(mat, glm::radians(azimuth), glm::vec3(0.0f, 1.0f, 0.0f));
        mat = glm::rotate(mat, glm::radians(inclination), glm::vec3(1.0f, 0.0f, 0.0f));
        return mat * glm::vec4(0.0f, 0.0f, radius, 1.0f);
    }
};

// variables for tracking camera and light position
polar camera;
glm::vec3 lightPosition = glm::vec3(0.0f, 10.0f, 0.0f);

float spotlightCutoff = 75.0f;
float spotlightOuterAngle = 200.0f;

float ambientIntensity = 0.75f;
float specularIntensity = 5.0f;
float specularPower = 50.0f;

double previousTime = 0.0;

// called by the main function to do initial setup, such as uploading vertex
// arrays, shader programs, etc.; returns true if successful, false otherwise
bool setupShadowMap()
{
    // create the FBO for rendering shadows
    glGenFramebuffers(1, &shadowMapFbo);
    glBindFramebuffer(GL_FRAMEBUFFER, shadowMapFbo);

    // attach a texture object to the framebuffer
    glGenTextures(1, &shadowMapTexture);
    glBindTexture(GL_TEXTURE_2D, shadowMapTexture);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT, SHADOW_SIZE, SHADOW_SIZE,
                 0, GL_DEPTH_COMPONENT, GL_FLOAT, NULL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, shadowMapTexture, 0);

    // check if we did everything right
    if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)
    {
        std::cout << "Could not create custom framebuffer.\n";
        return false;
    }

    // load the shader program for drawing the shadow map
    shadowMapShader = gdevLoadShader("demo8s.vs", "demo8s.fs");
    if (! shadowMapShader)
        return false;

    // set the framebuffer back to the default onscreen buffer
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    
    return true;
}

glm::mat4 renderShadowMap()
{
    // use the shadow framebuffer for drawing the shadow map
    glBindFramebuffer(GL_FRAMEBUFFER, shadowMapFbo);

    // the viewport should be the size of the shadow map
    glViewport(0, 0, SHADOW_SIZE, SHADOW_SIZE);

    // clear the shadow map
    // (we don't have a color buffer attachment, so no need to clear that)
    glClear(GL_DEPTH_BUFFER_BIT);

    // using the shadow map shader...
    glUseProgram(shadowMapShader);

    // ... set up the light space matrix...
    // (note that if you use a spot light, the FOV and the center position
    // vector should be set to your spotlight's outer radius and focus point,
    // respectively)
    glm::mat4 lightTransform;
    lightTransform = glm::perspective(glm::radians(75.0f),       // fov
                                      1.0f,                      // aspect ratio
                                      0.1f,                      // near plane
                                      100.0f);                   // far plane
    lightTransform *= glm::lookAt(lightPosition,                 // eye position
                                  glm::vec3(0.0f, 0.0f, 0.0f),   // center position
                                  glm::vec3(0.0f, 1.0f, 0.0f));  // up vector
    glUniformMatrix4fv(glGetUniformLocation(shadowMapShader, "lightTransform"),
                       1, GL_FALSE, glm::value_ptr(lightTransform));

    // ... set up the model matrix... (just identity for this demo)
    glm::mat4 modelTransform = glm::mat4(1.0f);
    glUniformMatrix4fv(glGetUniformLocation(shadowMapShader, "modelTransform"),
                       1, GL_FALSE, glm::value_ptr(modelTransform));

    // ... then draw our triangles
    glBindVertexArray(vao2);
    glDrawArrays(GL_TRIANGLES, 0, sizeof(planeVertices) / (8 * sizeof(float)));

    // set the framebuffer back to the default onscreen buffer
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    // before drawing the final scene, we need to set drawing to the whole window
    int width, height;
    glfwGetFramebufferSize(pWindow, &width, &height);
    glViewport(0, 0, width, height);

    // we will need the light transformation matrix again in the main rendering code
    return lightTransform;
}

bool setup()
{
    // upload the model to the GPU (explanations omitted for brevity)
    glGenVertexArrays(1, &vao);
    glGenBuffers(1, &vbo);
    glBindVertexArray(vao);
    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) 0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (3 * sizeof(float)));
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (6 * sizeof(float)));
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (9 * sizeof(float)));
    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);
    glEnableVertexAttribArray(2);
    glEnableVertexAttribArray(3);

    // upload the model to the GPU (explanations omitted for brevity)
    glGenVertexArrays(1, &vao2);
    glGenBuffers(1, &vbo2);
    glBindVertexArray(vao2);
    glBindBuffer(GL_ARRAY_BUFFER, vbo2);
    glBufferData(GL_ARRAY_BUFFER, sizeof(planeVertices), planeVertices, GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) 0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (3 * sizeof(float)));
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (6 * sizeof(float)));
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (9 * sizeof(float)));
    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);
    glEnableVertexAttribArray(2);
    glEnableVertexAttribArray(3);

    glGenVertexArrays(1, &vao3);
    glGenBuffers(1, &vbo3);
    glBindVertexArray(vao3);
    glBindBuffer(GL_ARRAY_BUFFER, vbo3);
    glBufferData(GL_ARRAY_BUFFER, sizeof(coneVertices), coneVertices, GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) 0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (3 * sizeof(float)));
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (6 * sizeof(float)));
    glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 11 * sizeof(float), (void*) (9 * sizeof(float)));
    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);
    glEnableVertexAttribArray(2);
    glEnableVertexAttribArray(3);

    // load our shader program
    shader = gdevLoadShader("demo5n.vs", "demo5n.fs");
    if (! shader)
        return false;

    // since we now use multiple textures, we need to set the texture channel for each texture
    glUseProgram(shader);
    glUniform1i(glGetUniformLocation(shader, "diffuseMap"), 0);
    glUniform1i(glGetUniformLocation(shader, "normalMap"),  1);

    // load our textures
    texture[0] = gdevLoadTexture("cone.jpeg", GL_REPEAT, true, true);
    texture[1] = gdevLoadTexture("conenormalmap.png", GL_REPEAT, true, true);
    if (! texture[0] || ! texture[1])
        return false;

    texturePlane[0] = gdevLoadTexture("exercise2diffusemap.png", GL_REPEAT, true, true);
    texturePlane[1] = gdevLoadTexture("exercise2normalmap.png", GL_REPEAT, true, true);
    if (! texturePlane[0] || ! texturePlane[1])
        return false;

    iceCreamTexture[0] = gdevLoadTexture("IceCream2.jpg", GL_REPEAT, true, true);
    iceCreamTexture[1] = gdevLoadTexture("IceCream2NMap.png", GL_REPEAT, true, true);
    if (! texture[0] || ! texture[1])
        return false;

    if (! setupShadowMap())
            return false;
    if (! setupFbo())
        return false;
    // enable z-buffer depth testing and face culling
    glDisable(GL_CULL_FACE);

    return true;
}

// called by the main function to do rendering per frame
void render()
{
    // find the elapsed time since the last frame
    double currentTime = glfwGetTime();
    double elapsedTime = (currentTime - previousTime);
    previousTime = currentTime;

    // define how much to rotate and translate according to time
    float rotationAmount = 100.0f * elapsedTime;
    float translationAmount = 10.0f * elapsedTime;

    // handle key events for camera
    if (glfwGetKey(pWindow, GLFW_KEY_W) == GLFW_PRESS)
        camera.radius -= translationAmount;
    if (glfwGetKey(pWindow, GLFW_KEY_S) == GLFW_PRESS)
        camera.radius += translationAmount;
    if (glfwGetKey(pWindow, GLFW_KEY_A) == GLFW_PRESS)
        camera.azimuth -= rotationAmount;
    if (glfwGetKey(pWindow, GLFW_KEY_D) == GLFW_PRESS)
        camera.azimuth += rotationAmount;
    if (glfwGetKey(pWindow, GLFW_KEY_Q) == GLFW_PRESS)
        camera.inclination += rotationAmount;
    if (glfwGetKey(pWindow, GLFW_KEY_E) == GLFW_PRESS)
        camera.inclination -= rotationAmount;
    camera.clamp();

    // get the Cartesian coordinates of the camera
    glm::vec3 cameraPosition = camera.toCartesian();

    // get a "forward" vector for controlling the light position
    glm::vec3 lightForward = glm::normalize(glm::vec3(-cameraPosition.x, 0.0f, -cameraPosition.z));

    if (glfwGetKey(pWindow, GLFW_KEY_I) == GLFW_PRESS)
        lightPosition += lightForward * translationAmount;
    if (glfwGetKey(pWindow, GLFW_KEY_K) == GLFW_PRESS)
        lightPosition -= lightForward * translationAmount;
    if (glfwGetKey(pWindow, GLFW_KEY_J) == GLFW_PRESS)
        lightPosition -= glm::cross(lightForward, glm::vec3(0.0f, 1.0f, 0.0f)) * translationAmount;
    if (glfwGetKey(pWindow, GLFW_KEY_L) == GLFW_PRESS)
        lightPosition += glm::cross(lightForward, glm::vec3(0.0f, 1.0f, 0.0f)) * translationAmount;
    if (glfwGetKey(pWindow, GLFW_KEY_U) == GLFW_PRESS)
        lightPosition -= glm::vec3(0.0f, 1.0f, 0.0f) * translationAmount;
    if (glfwGetKey(pWindow, GLFW_KEY_O) == GLFW_PRESS)
        lightPosition += glm::vec3(0.0f, 1.0f, 0.0f) * translationAmount;
    if (glfwGetKey(pWindow, GLFW_KEY_Z) == GLFW_PRESS)
        ambientIntensity += 0.01f;
    if (glfwGetKey(pWindow, GLFW_KEY_X) == GLFW_PRESS)
        ambientIntensity -= 0.01f;
    if (glfwGetKey(pWindow, GLFW_KEY_C) == GLFW_PRESS)
        specularIntensity += 0.01f;
    if (glfwGetKey(pWindow, GLFW_KEY_V) == GLFW_PRESS)
        specularIntensity -= 0.01f;
    if (glfwGetKey(pWindow, GLFW_KEY_B) == GLFW_PRESS)
        specularPower+= 0.1f;
    if (glfwGetKey(pWindow, GLFW_KEY_N) == GLFW_PRESS)
        specularPower -= 0.1f;
    if (glfwGetKey(pWindow, GLFW_KEY_1) == GLFW_PRESS)
        spotlightCutoff += 0.1f;
    if (glfwGetKey(pWindow, GLFW_KEY_2) == GLFW_PRESS)
        spotlightCutoff -= 0.1f;
    if (glfwGetKey(pWindow, GLFW_KEY_3) == GLFW_PRESS)
        spotlightOuterAngle += 0.1f;
    if (glfwGetKey(pWindow, GLFW_KEY_4) == GLFW_PRESS)
        spotlightOuterAngle -= 0.1f;

    glm::mat4 lightTransform = renderShadowMap();

    // ... set up the light transformation (for looking up the shadow map)...
    glUniformMatrix4fv(glGetUniformLocation(shader, "lightTransform"),
                    1, GL_FALSE, glm::value_ptr(lightTransform));
    // ... set the active texture...
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, texture[0]);
    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, shadowMapTexture);
    glUniform1i(glGetUniformLocation(shader, "diffuseMap"), 0);
    glUniform1i(glGetUniformLocation(shader, "shadowMap"),  1);

    if (glfwGetKey(pWindow, GLFW_KEY_SPACE) == GLFW_PRESS)
    {
        glBindFramebuffer(GL_FRAMEBUFFER, fbo);
        glViewport(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);

        /*glm::mat4 lightTransform = renderShadowMap();

        // ... set up the light transformation (for looking up the shadow map)...
        glUniformMatrix4fv(glGetUniformLocation(shader, "lightTransform"),
                        1, GL_FALSE, glm::value_ptr(lightTransform));
        // ... set the active texture...
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, texture[0]);
        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_2D, shadowMapTexture);
        glUniform1i(glGetUniformLocation(shader, "diffuseMap"), 0);
        glUniform1i(glGetUniformLocation(shader, "shadowMap"),  1);*/

        // clear the whole frame
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glEnable(GL_DEPTH_TEST);

        // using our shader program...
        glUseProgram(shader);

        // ... set up the projection matrix...
        glm::mat4 projectionTransform;
        projectionTransform = glm::perspective(glm::radians(45.0f),                   // fov
                                            (float) WINDOW_WIDTH / WINDOW_HEIGHT,  // aspect ratio
                                            0.1f,                                  // near plane
                                            100.0f);                               // far plane
        glUniformMatrix4fv(glGetUniformLocation(shader, "projectionTransform"),
                        1, GL_FALSE, glm::value_ptr(projectionTransform));

        // ... set up the view matrix...
        glm::mat4 viewTransform;
        viewTransform = glm::lookAt(cameraPosition,                // eye position
                                    glm::vec3(0.0f, 0.0f, 0.0f),   // center position
                                    glm::vec3(0.0f, 1.0f, 0.0f));  // up vector
        glUniformMatrix4fv(glGetUniformLocation(shader, "viewTransform"),
                        1, GL_FALSE, glm::value_ptr(viewTransform));
        
        // ... set up the light position...
        glUniform3fv(glGetUniformLocation(shader, "lightPosition"),
                    1, glm::value_ptr(lightPosition));

        glUniform1f(glGetUniformLocation(shader, "uniformAmbientIntensity"), ambientIntensity);
        glUniform1f(glGetUniformLocation(shader, "uniformSpecularIntensity"), specularIntensity);
        glUniform1f(glGetUniformLocation(shader, "uniformSpecularPower"), specularPower);

        glUniform1f(glGetUniformLocation(shader,"spotlightCutoff"),glm::cos(glm::radians(spotlightCutoff)));
        glUniform1f(glGetUniformLocation(shader,"spotlightOuterAngle"), glm::cos(glm::radians(spotlightOuterAngle)));

        // Sphere MODEL
        {
            glm::mat4 modelTransform = glm::mat4(1.0f);
            modelTransform = glm::scale(modelTransform, glm::vec3(1.00f, 1.00f, 1.00f));
            modelTransform = glm::translate(modelTransform, glm::vec3(0.0f,3.0f, 0.0f));
            modelTransform = glm::rotate(modelTransform, glm::radians((float) 90.0f), glm::vec3(1.0f,0.0f,0.0f));
            modelTransform = glm::rotate(modelTransform, glm::radians((float) currentTime * 90), glm::vec3(0.0f,0.0f,1.0f));

            glUniformMatrix4fv(glGetUniformLocation(shader, "modelTransform"),
                            1, GL_FALSE, glm::value_ptr(modelTransform));
            glActiveTexture(GL_TEXTURE0);
            glBindTexture(GL_TEXTURE_2D, iceCreamTexture[0]);
            glActiveTexture(GL_TEXTURE1);
            glBindTexture(GL_TEXTURE_2D, iceCreamTexture[1]);
            
            glBindVertexArray(vao);
            glDrawElements(GL_TRIANGLES, 1500, GL_UNSIGNED_INT, planeIndices);
            glDrawArrays(GL_TRIANGLE_FAN, 209, 11);
        }
    
        {
            glBindVertexArray(vao3);
            glm::mat4 modelTransform = glm::mat4(1.0f);
            modelTransform = glm::scale(modelTransform, glm::vec3(0.9f, 0.9f, 0.9f));
            modelTransform = glm::translate(modelTransform, glm::vec3(0.0f,3.0f, 0.0f));
            modelTransform = glm::rotate(modelTransform, glm::radians((float) 90.0f), glm::vec3(1.0f,0.0f,0.0f));
            modelTransform = glm::rotate(modelTransform, glm::radians((float) currentTime * 90), glm::vec3(0.0f,0.0f,1.0f));

            glUniformMatrix4fv(glGetUniformLocation(shader, "modelTransform"),
                            1, GL_FALSE, glm::value_ptr(modelTransform));
            glActiveTexture(GL_TEXTURE0);
            glBindTexture(GL_TEXTURE_2D, texture[0]);
            glActiveTexture(GL_TEXTURE1);
            glBindTexture(GL_TEXTURE_2D, texture[1]);
            glDrawArrays(GL_TRIANGLE_FAN, 0, 102);
        }

        {
            glm::mat4 planeTransform = glm::mat4(1.0f);
            planeTransform = glm::translate(planeTransform, glm::vec3(0.0f,-15.0f, 0.0f));
            planeTransform = glm::scale(planeTransform, glm::vec3(5.0f, 0.0f,5.0f));
            glUniformMatrix4fv(glGetUniformLocation(shader, "modelTransform"),
                            1, GL_FALSE, glm::value_ptr(planeTransform));
            glActiveTexture(GL_TEXTURE0);
            glBindTexture(GL_TEXTURE_2D, texturePlane[0]);
            glActiveTexture(GL_TEXTURE1);
            glBindTexture(GL_TEXTURE_2D, texturePlane[1]);

            glBindVertexArray(vao2);
            glDrawArrays(GL_TRIANGLES, 0, sizeof(planeVertices) / (8 * sizeof(float)));
        }
    
        renderFbo();
    }
    else
    {
        //glBindFramebuffer(GL_FRAMEBUFFER, fbo);
        glViewport(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
        // clear the whole frame
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glEnable(GL_DEPTH_TEST);

        // using our shader program...
        glUseProgram(shader);

        // ... set up the projection matrix...
        glm::mat4 projectionTransform;
        projectionTransform = glm::perspective(glm::radians(45.0f),                   // fov
                                            (float) WINDOW_WIDTH / WINDOW_HEIGHT,  // aspect ratio
                                            0.1f,                                  // near plane
                                            100.0f);                               // far plane
        glUniformMatrix4fv(glGetUniformLocation(shader, "projectionTransform"),
                        1, GL_FALSE, glm::value_ptr(projectionTransform));

        // ... set up the view matrix...
        glm::mat4 viewTransform;
        viewTransform = glm::lookAt(cameraPosition,                // eye position
                                    glm::vec3(0.0f, 0.0f, 0.0f),   // center position
                                    glm::vec3(0.0f, 1.0f, 0.0f));  // up vector
        glUniformMatrix4fv(glGetUniformLocation(shader, "viewTransform"),
                        1, GL_FALSE, glm::value_ptr(viewTransform));
        
        // ... set up the light position...
        glUniform3fv(glGetUniformLocation(shader, "lightPosition"),
                    1, glm::value_ptr(lightPosition));

        glUniform1f(glGetUniformLocation(shader, "uniformAmbientIntensity"), ambientIntensity);
        glUniform1f(glGetUniformLocation(shader, "uniformSpecularIntensity"), specularIntensity);
        glUniform1f(glGetUniformLocation(shader, "uniformSpecularPower"), specularPower);

        glUniform1f(glGetUniformLocation(shader,"spotlightCutoff"),glm::cos(glm::radians(spotlightCutoff)));
        glUniform1f(glGetUniformLocation(shader,"spotlightOuterAngle"), glm::cos(glm::radians(spotlightOuterAngle)));

        // Sphere MODEL
        {
            glm::mat4 modelTransform = glm::mat4(1.0f);
            modelTransform = glm::scale(modelTransform, glm::vec3(1.00f, 1.00f, 1.00f));
            modelTransform = glm::translate(modelTransform, glm::vec3(0.0f,3.0f, 0.0f));
            modelTransform = glm::rotate(modelTransform, glm::radians((float) 90.0f), glm::vec3(1.0f,0.0f,0.0f));
            modelTransform = glm::rotate(modelTransform, glm::radians((float) currentTime * 90), glm::vec3(0.0f,0.0f,1.0f));

            glUniformMatrix4fv(glGetUniformLocation(shader, "modelTransform"),
                            1, GL_FALSE, glm::value_ptr(modelTransform));
            glActiveTexture(GL_TEXTURE0);
            glBindTexture(GL_TEXTURE_2D, iceCreamTexture[0]);
            glActiveTexture(GL_TEXTURE1);
            glBindTexture(GL_TEXTURE_2D, iceCreamTexture[1]);
            
            glBindVertexArray(vao);
            glDrawElements(GL_TRIANGLES, 1500, GL_UNSIGNED_INT, planeIndices);
            glDrawArrays(GL_TRIANGLE_FAN, 209, 11);
        }
    
        {
            glBindVertexArray(vao3);
            glm::mat4 modelTransform = glm::mat4(1.0f);
            modelTransform = glm::scale(modelTransform, glm::vec3(0.9f, 0.9f, 0.9f));
            modelTransform = glm::translate(modelTransform, glm::vec3(0.0f,3.0f, 0.0f));
            modelTransform = glm::rotate(modelTransform, glm::radians((float) 90.0f), glm::vec3(1.0f,0.0f,0.0f));
            modelTransform = glm::rotate(modelTransform, glm::radians((float) currentTime * 90), glm::vec3(0.0f,0.0f,1.0f));

            glUniformMatrix4fv(glGetUniformLocation(shader, "modelTransform"),
                            1, GL_FALSE, glm::value_ptr(modelTransform));
            glActiveTexture(GL_TEXTURE0);
            glBindTexture(GL_TEXTURE_2D, texture[0]);
            glActiveTexture(GL_TEXTURE1);
            glBindTexture(GL_TEXTURE_2D, texture[1]);
            glDrawArrays(GL_TRIANGLE_FAN, 0, 102);
        }

        {
            glm::mat4 planeTransform = glm::mat4(1.0f);
            planeTransform = glm::translate(planeTransform, glm::vec3(0.0f,-15.0f, 0.0f));
            planeTransform = glm::scale(planeTransform, glm::vec3(5.0f, 0.0f,5.0f));
            glUniformMatrix4fv(glGetUniformLocation(shader, "modelTransform"),
                            1, GL_FALSE, glm::value_ptr(planeTransform));
            glActiveTexture(GL_TEXTURE0);
            glBindTexture(GL_TEXTURE_2D, texturePlane[0]);
            glActiveTexture(GL_TEXTURE1);
            glBindTexture(GL_TEXTURE_2D, texturePlane[1]);

            glBindVertexArray(vao2);
            glDrawArrays(GL_TRIANGLES, 0, sizeof(planeVertices) / (8 * sizeof(float)));
        }
    }

}

/*****************************************************************************/

// handler called by GLFW when there is a keyboard event
void handleKeys(GLFWwindow* pWindow, int key, int scancode, int action, int mode)
{
    // pressing Esc closes the window
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(pWindow, GL_TRUE);
}

// handler called by GLFW when the window is resized
void handleResize(GLFWwindow* pWindow, int width, int height)
{
    // tell OpenGL to do its drawing within the entire "client area" (area within the borders) of the window
    glViewport(0, 0, width, height);
}

// main function
int main(int argc, char** argv)
{
    // initialize GLFW and ask for OpenGL 3.3 core
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

    // create a GLFW window with the specified width, height, and title
    pWindow = glfwCreateWindow(WINDOW_WIDTH, WINDOW_HEIGHT, WINDOW_TITLE, NULL, NULL);
    if (! pWindow)
    {
        // gracefully terminate if we cannot create the window
        std::cout << "Cannot create the GLFW window.\n";
        glfwTerminate();
        return -1;
    }

    // enable vertical sync and aspect-ratio correction on the GLFW window,
    // and make the window the current context of subsequent OpenGL commands
    glfwSwapInterval(1);
    glfwSetWindowAspectRatio(pWindow, WINDOW_WIDTH, WINDOW_HEIGHT);
    glfwMakeContextCurrent(pWindow);

    // set up callback functions to handle window system events
    glfwSetKeyCallback(pWindow, handleKeys);
    glfwSetFramebufferSizeCallback(pWindow, handleResize);

    // don't miss any momentary keypresses
    glfwSetInputMode(pWindow, GLFW_STICKY_KEYS, GLFW_TRUE);

    // initialize GLAD, which acts as a library loader for the current OS's native OpenGL library
    gladLoadGLLoader((GLADloadproc) glfwGetProcAddress);

    // if our initial setup is successful...
    if (setup())
    {
        // do rendering in a loop until the user closes the window
        while (! glfwWindowShouldClose(pWindow))
        {
            // render our next frame
            // (by default, GLFW uses double-buffering with a front and back buffer;
            // all drawing goes to the back buffer, so the frame does not get shown yet)
            render();

            // swap the GLFW front and back buffers to show the next frame
            glfwSwapBuffers(pWindow);

            // process any window events (such as moving, resizing, keyboard presses, etc.)
            glfwPollEvents();
        }
    }

    // gracefully terminate the program
    glfwTerminate();
    return 0;
}
